#include <xio.h>
#include <string.h>
#include <mb_interface.h>
#include "xparameters.h"

// Define the UART_BASE_ADDRESS.
#define UART_BASE_ADDRESS XPAR_UARTLITE_0_BASEADDR

// Define the UART register offset.
#define XUARTLITE_CONTROL_REG_OFFSET 0x08
#define XUARTLITE_STATUS_REG_OFFSET 0x04
#define XUARTLITE_RX_FIFO_OFFSET 0x00
#define XUARTLITE_TX_FIFO_OFFSET 0x04

// Define the bit masks for the appropriate status flags.
#define XUARTLITE_CR_ENABLE_INTR 0x10
#define XUARTLITE_SR_RX_FIFO_VALID_DATA 0x01

// Define interrupt enable bit for the UART module
#define XIN_IER_INTERRUPT_ENABLE_MASK 0x02

void ISR() __attribute__((interrupt_handler));
u32 count = 0;

void set_bit_in_reg(u32 addr, u32 bit) {
    // RMW
    u32 val;
    val = XIo_In32((volatile u32 *)addr);
    val |= bit;
    XIo_Out32((volatile u32 *)addr, val);
}

void clear_bit_in_reg(u32 addr, u32 bit) {
    // RMW
    u32 val;
    val = XIo_In32((volatile u32 *)addr);
    val &= ~bit;
    XIo_Out32((volatile u32 *)addr, val);
}

void ISR(void) {
    // Service the interrupt
    // Read the status register to check the source of the interrupt
    u32 status = XIo_In32(UART_BASE_ADDRESS + XUARTLITE_STATUS_REG_OFFSET);

    // Check if RX FIFO has valid data
    if (status & XUARTLITE_SR_RX_FIFO_VALID_DATA) {
        // Read the received data
        u32 data = XIo_In32(UART_BASE_ADDRESS + XUARTLITE_RX_FIFO_OFFSET);
        // Process the received data (for example, just increment count)
        count++;
    }

    // Clear the interrupt (optional if required)
    // Write to the status register to clear the interrupt flag if required
    // This depends on the specific UART module's requirement
    // XIo_Out32(UART_BASE_ADDRESS + XUARTLITE_STATUS_REG_OFFSET, status);
}

int main(void) {
    // Enable the UART to generate interrupts
    set_bit_in_reg(UART_BASE_ADDRESS + XUARTLITE_CONTROL_REG_OFFSET, XUARTLITE_CR_ENABLE_INTR);

    // Enable MicroBlaze to respond to interrupts
    microblaze_enable_interrupts();

    while (1) {
        ; // Useful work goes here
    }

    // Disable Interrupts (if needed)
    // clear_bit_in_reg(UART_BASE_ADDRESS + XUARTLITE_CONTROL_REG_OFFSET, XUARTLITE_CR_ENABLE_INTR);
    microblaze_disable_interrupts();

    // Exit normally
    return 0;
}
